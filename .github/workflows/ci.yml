name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint (ruff)
        run: |
          ruff --version
          ruff check .

      - name: Type check (mypy)
        run: |
          mypy --version
          mypy --config-file mypy.ini .

      - name: Run tests (with coverage)
        env:
          DATABASE_URL: sqlite:///./monassurance.db
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=backend --cov-report=term-missing --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: backend
          name: monassurance
          slug: lwilly3/monassurance
          use_oidc: true
          fail_ci_if_error: false
          verbose: true

      - name: Upload coverage (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./.coverage*

  build-test-postgres:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: monassurance
          POSTGRES_USER: monassurance
          POSTGRES_PASSWORD: devpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U monassurance" 
          --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Wait for Postgres
        run: |
          for i in {1..20}; do
            pg_isready -h localhost -p 5432 -U monassurance && break
            sleep 1
          done

      - name: Run Alembic migrations
        env:
          DATABASE_URL: postgresql+psycopg2://monassurance:devpass@localhost:5432/monassurance
        run: |
          alembic upgrade head

      - name: API DB health check (optional)
        env:
          DATABASE_URL: postgresql+psycopg2://monassurance:devpass@localhost:5432/monassurance
        run: |
          python - <<'PY'
          import os
          from sqlalchemy import create_engine, text
          engine = create_engine(os.environ['DATABASE_URL'])
          with engine.connect() as c:
              c.execute(text('SELECT 1'))
          print('DB OK')
          PY

      - name: Run tests on PostgreSQL
        env:
          DATABASE_URL: postgresql+psycopg2://monassurance:devpass@localhost:5432/monassurance
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=backend --cov-report=xml

      - name: Upload coverage to Codecov (PostgreSQL)
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: backend,postgres
          name: monassurance-pg
          slug: lwilly3/monassurance
          use_oidc: true
          fail_ci_if_error: false
          verbose: true

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image
        run: |
          docker build -t monassurance:ci .
